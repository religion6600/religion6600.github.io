[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "6600 Final Project",
    "section": "",
    "text": "hello world!"
  },
  {
    "objectID": "code/clustering.html",
    "href": "code/clustering.html",
    "title": "Clustering Analysis",
    "section": "",
    "text": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import silhouette_score\ndf = pd.read_csv(\"../data/religion_data.csv\")\ndf.head()\n\n\n\n\n\n\n\n\nP_SUID\nYEAR_FROM_CODATE\nHAPPY\nSATIS_A\nSATIS_B\nCHNG_A\nCHNG_B\nCHNG_C\nDIVRELPOP\nDIVRACPOP\n...\nMOVED\nREG\nPARTY\nIDEO\nHH1REC\nINTFREQ\nINC_SDT1\nGENDER\nFERTREC\nWEIGHT\n\n\n\n\n0\n10000040\n2023\n1\n2\n2\n2\n3\n2\n2\n3\n...\n1\n1\n1\n1\n3\n2\n2\n2\n1\n4399.707781\n\n\n1\n10000060\n2023\n1\n2\n1\n1\n1\n1\n1\n1\n...\n2\n1\n2\n5\n3\n2\n7\n2\n2\n6693.424549\n\n\n2\n10000140\n2024\n2\n2\n3\n3\n1\n1\n1\n1\n...\n1\n1\n3\n3\n2\n1\n7\n2\n0\n3080.916226\n\n\n3\n10000150\n2023\n3\n3\n3\n2\n1\n2\n3\n1\n...\n2\n1\n1\n3\n2\n2\n99\n2\n2\n5470.685158\n\n\n4\n10000160\n2023\n3\n1\n1\n3\n1\n2\n1\n1\n...\n2\n1\n2\n4\n2\n1\n5\n2\n2\n2474.921511\n\n\n\n\n5 rows × 107 columns"
  },
  {
    "objectID": "code/clustering.html#selecting-relevant-features",
    "href": "code/clustering.html#selecting-relevant-features",
    "title": "Clustering Analysis",
    "section": "Selecting Relevant Features",
    "text": "Selecting Relevant Features\n\nfeatures = [\n    'CHNG_C',        # Views on transgender people\n    'DIVRELPOP',     # Diversity of religion in society\n    'DIVRACPOP',     # Diversity of race in society\n    'QB2A', 'QB2C', 'QB2D',  # Values: homosexuality, environment, right/wrong\n    'OPENIDEN', 'POORASSIST', 'GOVSIZE1',\n    'ABRTLGL', 'GAYMARR',  # Abortion & gay marriage\n    'CLIM1A', 'EVOL',      # Climate & evolution\n    'GUIDE_B', 'GUIDE_C', 'GUIDE_D',  # Logic, science, common sense\n    'MARITAL', 'CHILDREN', 'GENDER', 'BIRTHDECADE',\n    'EDUCREC', 'EMPLSIT', 'USGEN', 'REG', 'PARTY', 'IDEO',\n    'HH1REC', 'INTFREQ', 'INC_SDT1'\n]"
  },
  {
    "objectID": "code/clustering.html#k-means",
    "href": "code/clustering.html#k-means",
    "title": "Clustering Analysis",
    "section": "K-Means",
    "text": "K-Means\nWe applied KMeans clustering to a set of respondents using a range of non-religious socio-political and demographic features, including views on gender and sexuality, political ideology, education, income, attitudes toward science and government, and more. The goal was to determine whether individuals naturally group into distinct sociocultural profiles — and to assess how those profiles correspond (if at all) with religious tradition (RELTRAD).\n\nOptimal # of CLusters\nFirst we attempted to find optimalk with elbow method but it’s not exactly clear, possible k=5.\n\nX = df[features].dropna()  # Drop rows with missing values\n\n# Keep original indices to map back religion\ndf_clean = df.loc[X.index]\n\n# Scale features\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Elbow Method to choose k\nwcss = []\nfor i in range(2, 10):\n    kmeans = KMeans(n_clusters=i, random_state=42)\n    kmeans.fit(X_scaled)\n    wcss.append(kmeans.inertia_)\n\nplt.plot(range(2, 10), wcss, marker='o')\nplt.title(\"Elbow Method for Optimal k\")\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()\n\n\n\n\n\n\n\n\nSilhouette Score demonstrates that optimal k=2, but there are more than two religions so this may be limiting - we won’t be able to map religions directly but we can possibly see traditionalist religions vs progressive.\n\n\nK = 2\n\nsilhouette_scores = []\nK_range = range(2, 10)\n\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    labels = kmeans.fit_predict(X_scaled)\n    score = silhouette_score(X_scaled, labels)\n    silhouette_scores.append(score)\n\nplt.figure(figsize=(8, 5))\nplt.plot(K_range, silhouette_scores, marker='o')\nplt.title('Silhouette Score for different k')\nplt.xlabel('Number of clusters (k)')\nplt.ylabel('Silhouette Score')\nplt.xticks(K_range)\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=2, random_state=42)\ndf_clean['cluster'] = kmeans.fit_predict(X_scaled)\n\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_scaled)\ndf_clean['pca1'] = X_pca[:, 0]\ndf_clean['pca2'] = X_pca[:, 1]\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=df_clean, x='pca1', y='pca2', hue='cluster', palette='Set2')\nplt.title(\"KMeans Clustering with k=2 (PCA-reduced)\")\nplt.show()\n\n\n\n\n\n\n\n\n\npd.crosstab(df_clean['cluster'], df_clean['RELTRAD'])\n\n\n\n\n\n\n\nRELTRAD\n1100\n1200\n1300\n10000\n20000\n30000\n40001\n40002\n50000\n60000\n70000\n80000\n90001\n90002\n100000\n900000\n\n\ncluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n7791\n5023\n1342\n6564\n545\n209\n88\n210\n821\n250\n336\n219\n93\n725\n10317\n311\n\n\n1\n507\n310\n126\n394\n20\n16\n25\n16\n29\n23\n12\n28\n6\n36\n412\n104\n\n\n\n\n\n\n\nCluster profiles by feature (Standardized Average)\n\ncluster_profiles = df_clean.groupby('cluster')[features].mean().T\ncluster_profiles.columns = [f'Cluster {i}' for i in cluster_profiles.columns]\ncluster_profiles.plot(kind='bar', figsize=(16, 6), colormap='Set2')\nplt.title(\"Cluster Feature Averages (k=2)\")\nplt.ylabel(\"Mean value (standardized scale)\")\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nCluster 0: Traditionalist-Conservative Profile - Lower support for abortion access, gay marriage, and transgender rights - Lower scores on science-based decision-making and belief in evolution - More traditional views on family, gender, and government roles - Slightly lower educational attainment and income - Politically more conservative on average\nCluster 1: Progressive-Secular Profile - Significantly higher support for LGBTQ+ rights, abortion, and climate action - Stronger emphasis on scientific reasoning, logic, and evolution acceptance - Higher average education and income levels - More likely to be politically liberal or Democratic - More urban and socially inclusive profile\n*RELTRAD Distribution per Cluster\n\nreltrad_labels = {\n    1100: \"Evangelical Protestant\",\n    1200: \"Mainline Protestant\",\n    1300: \"Historically Black Protestant\",\n    10000: \"Catholic\",\n    20000: \"Mormon\",\n    30000: \"Orthodox Christian\",\n    40001: \"Jehovah's Witness\",\n    40002: \"Other Christian\",\n    50000: \"Jewish\",\n    60000: \"Muslim\",\n    70000: \"Buddhist\",\n    80000: \"Hindu\",\n    90001: \"Other World Religions\",\n    90002: \"Other Faiths\",\n    100000: \"Religiously Unaffiliated\",\n    900000: \"Don't know/refused\"\n}\n\n\ndf_clean['RELTRAD_label'] = df_clean['RELTRAD'].map(reltrad_labels)\nct = pd.crosstab(df_clean['cluster'], df_clean['RELTRAD_label'], normalize='index')\n\nct.plot(kind='bar', stacked=True, figsize=(14, 7), colormap='tab20')\nplt.title(\"RELTRAD Distribution by Cluster (k=2)\")\nplt.xlabel(\"Cluster\")\nplt.ylabel(\"Proportion\")\nplt.legend(title=\"Religious Tradition\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nConclusions:\n\nMost major religious traditions (Evangelical, Catholic, Mainline Protestant) are evenly distributed across clusters.\nThis suggests that religious identity alone does not strongly predict worldview orientation.\nFor example, ~23% of both clusters are Evangelical Protestants, despite vast differences in cultural values.\nThe Religiously Unaffiliated group is overrepresented in Cluster 0, the “Traditionalist” cluster.\nThis is a bit counterintuitive — and likely reflects the diversity within the unaffiliated group, which includes atheists, agnostics, spiritual-but-not-religious individuals, and culturally non-religious people with differing values.\nCluster 1 includes relatively higher proportions of religious minorities and smaller groups (e.g., Hindu, Muslim, Buddhist), but numbers are small in both.\nPeople of the same religion — particularly large groups like Evangelicals, Catholics, and the Unaffiliated — are found in both clusters, revealing intra-religious ideological diversity."
  },
  {
    "objectID": "code/clustering.html#k-5",
    "href": "code/clustering.html#k-5",
    "title": "Clustering Analysis",
    "section": "K = 5",
    "text": "K = 5\nNow we will use k=5 to capture more nuanced sociopoltiical differences and possible capture differences between the two subgroups.\n\nkmeans_5 = KMeans(n_clusters=5, random_state=42)\ndf_clean['cluster_5'] = kmeans_5.fit_predict(X_scaled)\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_scaled)\ndf_clean['pca1'] = X_pca[:, 0]\ndf_clean['pca2'] = X_pca[:, 1]\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=df_clean, x='pca1', y='pca2', hue='cluster_5', palette='Set2')\nplt.title(\"KMeans Clustering with k=5 (PCA-reduced)\")\nplt.legend(title='Cluster')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nCluster profiles by feature (Standardized Average)\n\ncluster_profiles_5 = df_clean.groupby('cluster_5')[features].mean().T\ncluster_profiles_5.columns = [f'Cluster {i}' for i in cluster_profiles_5.columns]\ncluster_profiles_5.plot(kind='bar', figsize=(16, 6), colormap='Set2')\nplt.title(\"Cluster Feature Averages (k=5)\")\nplt.ylabel(\"Mean value (standardized scale)\")\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nCluster 0 (Green-teal)\nModerate baseline across most features, with: - Low to moderate support for LGBTQ+ rights (CHNG_C), gay marriage (GAYMARR), and abortion access (ABRTLGL) - Lower belief in science-based reasoning (EVOL, GUIDE_D), but not the lowest - Slightly lower education (EDUCREC) and income (INC_SDT1) - Lower openness (OPENIDEN) and acceptance of diversity (DIVRELPOP, DIVRACPOP)\nThis cluster reflects a modestly traditional group with relatively lower political or social engagement. They may represent lower-income individuals with mixed or centrist values.\n\nCluster 1 (Blue): Strongly progressive values, including:\n\nHigh support for LGBTQ+ rights, abortion, and social inclusion\nElevated belief in evolution and use of science in decision-making (EVOL, GUIDE_B, GUIDE_D)\nHigher liberal political orientation (IDEO, PARTY)\nHigh education and income levels (EDUCREC, INC_SDT1)\nLow support for limited government (GOVSIZE1), possibly favoring social programs\n\nThis cluster appears to represent a progressive, well-educated population with a high level of civic engagement and trust in science.\nCluster 2 (Light Green): Defined by one dominant outlier:\n\nCLIM1A (concern about climate change) is extremely high—almost 100 on standardized scale\nFairly moderate or slightly progressive values across the board\n\nThis may represent a group strongly motivated by environmental concern, though the extreme spike in one feature could also reflect a data or scaling artifact.\nCluster 3 (Orange): Marked by very high civic and socioeconomic engagement\n\nStrong scores on political participation (PARTY, IDEO), education (EDUCREC), income (INC_SDT1), internet use (INTFREQ), and household size (HH1REC)\nAlso high on science-related features (EVOL, GUIDE_B/C/D)\nHigh support for LGBTQ+ rights, abortion, and openness\n\nThis cluster likely represents high-income, highly educated individuals with strong progressive values. Potentially urban, young professionals or politically active elites.\nCluster 4 (Gray): Distinct for strong traditional and conservative indicators.\n\nPreference for smaller government (GOVSIZE1)\nLow openness (OPENIDEN), low scientific reliance (GUIDE_D), and low diversity tolerance\nTraditional family values: higher scores on CHILDREN, GENDER, MARITAL\nLower political liberalism (IDEO, PARTY)\n\nThis cluster likely reflects a socially conservative population with strong emphasis on family, tradition, and limited government. Trust in science and progressive norms is relatively low.\n*RELTRAD Distribution per Cluster\n\n# Optional: drop \"refused\" or unclear categories\nexcluded = [\"Don't know/refused\", \"Other Christian\", \"Other World Religions\", \"Other Faiths\"]\ndf_clean = df_clean[~df_clean['RELTRAD_label'].isin(excluded)]\n\n# RELTRAD by cluster\nct_5 = pd.crosstab(df_clean['cluster_5'], df_clean['RELTRAD_label'], normalize='index')\nct_5.plot(kind='bar', stacked=True, figsize=(14, 7), colormap='tab20')\nplt.title(\"RELTRAD Distribution by Cluster (k=5)\")\nplt.xlabel(\"Cluster\")\nplt.ylabel(\"Proportion\")\nplt.legend(title=\"Religious Tradition\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nCluster 0: Mixed religious background with a high share of unaffiliated. Likely a moderately secular group.\nCluster 1: Heavily Evangelical Protestant. Strongly religious and likely more traditional.\nCluster 2: Balanced mix — Catholic, Protestant, and unaffiliated all present. Moderate religious diversity.\nCluster 3: Mostly unaffiliated. Reflects a highly secular, progressive group.\nCluster 4: Dominated by Evangelical Protestants, with some Catholic and Mainline. Likely socially conservative.\n\nIn short, Clusters 1 and 4 skew religious/traditional, while Cluster 3 is clearly secular. Clusters 0 and 2 fall somewhere in between."
  },
  {
    "objectID": "code/QDA.html",
    "href": "code/QDA.html",
    "title": "QDA",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, RocCurveDisplay\nfrom sklearn.preprocessing import StandardScaler, label_binarize\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.feature_selection import VarianceThreshold\nfrom imblearn.over_sampling import SMOTE\nimport warnings\n\n# dealing with an SkLearn deprecated warning\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn\")\n\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Orthodox Christian',\n    40001: 'Jehovahs Witness',\n    40002: 'Other Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Buddhist',\n    80000: 'Hindu',\n    90001: 'Other world Religions',\n    90002: 'Other faiths',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant               8723\nUnaffiliated             7355\nCatholic                 4074\nJewish                    521\nOther faiths              508\nMormon                    362\nBuddhist                  232\nMuslim                    167\nHindu                     164\nOrthodox Christian        132\nOther Christian           117\nOther world Religions      59\nJehovahs Witness           34\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nplt.figure(figsize=(12, 6))\nsns.countplot(x=y)\nplt.xticks(rotation=45, ha='right')\nplt.title(\"Class Distribution in CURREL\")\nplt.xlabel(\"CURREL NEW\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6795657015590201\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                       precision    recall  f1-score   support\n\n             Buddhist       0.22      0.18      0.20        39\n             Catholic       0.56      0.65      0.60       815\n                Hindu       0.48      0.41      0.44        34\n     Jehovahs Witness       1.00      0.10      0.18        10\n               Jewish       0.23      0.49      0.31       107\n               Mormon       0.18      0.65      0.28        69\n               Muslim       0.53      0.27      0.36        37\n   Orthodox Christian       0.00      0.00      0.00        27\n      Other Christian       0.00      0.00      0.00        26\n         Other faiths       0.14      0.38      0.20        87\nOther world Religions       0.00      0.00      0.00        13\n           Protestant       0.82      0.66      0.73      1777\n         Unaffiliated       0.91      0.81      0.86      1449\n\n             accuracy                           0.67      4490\n            macro avg       0.39      0.35      0.32      4490\n         weighted avg       0.74      0.67      0.70      4490\n\n0.6746102449888641\n-----------------------\nCONFUSION MATRIX:\n[[   7    1    2    0    3    0    2    0    0    6    0    2   16]\n [   4  530    2    0   42   39    0    3    4    7    1  171   12]\n [   5    2   14    0    1    0    3    0    0    0    0    1    8]\n [   0    1    0    1    0    0    0    0    0    0    0    8    0]\n [   0   17    0    0   52    1    0    1    0   10    0    7   19]\n [   0   12    0    0    0   45    0    0    0    0    0   11    1]\n [   3    8    4    0    2    0   10    1    0    0    0    6    3]\n [   1   10    1    0    1    0    1    0    0    0    0   12    1]\n [   0    6    0    0    1    1    0    0    0    8    0    7    3]\n [   2    3    0    0    2    0    0    0    0   33    0    5   42]\n [   1    0    1    0    0    0    1    0    0    4    0    2    4]\n [   2  342    0    0   74  161    1    6   11    7    0 1165    8]\n [   7   21    5    0   46    0    1    1    2  168    1   25 1172]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Christian',\n    10000: 'Christian',\n    20000: 'Christian',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Non-Christian',\n    60000: 'Non-Christian',\n    70000: 'Non-Christian',\n    80000: 'Non-Christian',\n    90001: 'Non-Christian',\n    90002: 'Non-Christian',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nChristian        13442\nUnaffiliated      7355\nNon-Christian     1651\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.8933741648106904\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n               precision    recall  f1-score   support\n\n    Christian       0.97      0.92      0.95      2724\nNon-Christian       0.38      0.57      0.46       317\n Unaffiliated       0.91      0.89      0.90      1449\n\n     accuracy                           0.89      4490\n    macro avg       0.75      0.80      0.77      4490\n weighted avg       0.91      0.89      0.90      4490\n\n0.889532293986637\n-----------------------\nCONFUSION MATRIX:\n[[2519  175   30]\n [  37  181   99]\n [  36  119 1294]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Other Religion',\n    80000: 'Other Religion',\n    90001: 'Other Religion',\n    90002: 'Other Religion',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant        8723\nUnaffiliated      7355\nCatholic          4074\nOther Religion     963\nJewish             521\nMormon             362\nChristian          283\nMuslim             167\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6909799554565702\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                precision    recall  f1-score   support\n\n      Catholic       0.56      0.64      0.60       815\n     Christian       0.14      0.16      0.15        63\n        Jewish       0.23      0.50      0.32       107\n        Mormon       0.18      0.65      0.29        69\n        Muslim       0.53      0.22      0.31        37\nOther Religion       0.29      0.48      0.36       173\n    Protestant       0.83      0.65      0.73      1777\n  Unaffiliated       0.91      0.82      0.86      1449\n\n      accuracy                           0.68      4490\n     macro avg       0.46      0.52      0.45      4490\n  weighted avg       0.75      0.68      0.71      4490\n\n0.6841870824053452\n-----------------------\nCONFUSION MATRIX:\n[[ 525   18   43   39    0   13  166   11]\n [  14   10    4    1    1    8   22    3]\n [  18    1   54    1    0    5    7   21]\n [  12    0    0   45    0    0   11    1]\n [   6    2    1    0    8   12    6    2]\n [   5    1    8    0    4   83    7   65]\n [ 341   31   71  159    1    6 1160    8]\n [  19    8   51    0    1  159   24 1187]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, RocCurveDisplay\nfrom sklearn.preprocessing import StandardScaler, label_binarize\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.feature_selection import VarianceThreshold\nfrom imblearn.over_sampling import SMOTE\nimport warnings\n\n# dealing with an SkLearn deprecated warning\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn\")\n\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Orthodox Christian',\n    40001: 'Jehovahs Witness',\n    40002: 'Other Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Buddhist',\n    80000: 'Hindu',\n    90001: 'Other world Religions',\n    90002: 'Other faiths',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant               8723\nUnaffiliated             7355\nCatholic                 4074\nJewish                    521\nOther faiths              508\nMormon                    362\nBuddhist                  232\nMuslim                    167\nHindu                     164\nOrthodox Christian        132\nOther Christian           117\nOther world Religions      59\nJehovahs Witness           34\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6205456570155902\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                       precision    recall  f1-score   support\n\n             Buddhist       0.12      0.21      0.15        39\n             Catholic       0.61      0.60      0.60       815\n                Hindu       0.24      0.50      0.32        34\n     Jehovahs Witness       0.50      0.20      0.29        10\n               Jewish       0.27      0.53      0.36       107\n               Mormon       0.10      0.72      0.18        69\n               Muslim       0.44      0.43      0.44        37\n   Orthodox Christian       0.02      0.11      0.04        27\n      Other Christian       0.06      0.19      0.09        26\n         Other faiths       0.12      0.39      0.18        87\nOther world Religions       0.00      0.00      0.00        13\n           Protestant       0.84      0.53      0.65      1777\n         Unaffiliated       0.94      0.75      0.84      1449\n\n             accuracy                           0.60      4490\n            macro avg       0.33      0.40      0.32      4490\n         weighted avg       0.77      0.60      0.66      4490\n\n0.6044543429844098\n-----------------------\nCONFUSION MATRIX:\n[[   8    0    2    0    6    0    4    1    1    8    0    2    7]\n [   6  488    1    0   49   67    2   35   25    1    0  139    2]\n [   4    0   17    0    3    0    1    1    0    1    0    0    7]\n [   0    0    0    2    1    2    0    0    0    0    0    5    0]\n [   6   14    4    0   57    2    1    2    4    5    1    4    7]\n [   2    5    0    0    0   50    0    4    1    1    0    5    1]\n [   1    2    6    0    3    2   16    4    0    0    0    1    2]\n [   1    4    1    0    3    4    0    3    1    0    0    9    1]\n [   5    3    0    0    3    2    0    1    5    4    0    3    0]\n [   6    2    1    0    1    1    3    0    2   34    3    0   34]\n [   2    0    2    0    1    0    1    0    1    3    0    0    3]\n [   3  273    0    2   71  349    3   83   44    0    0  947    2]\n [  25   14   38    0   16    3    5    5    3  236   10    7 1087]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Christian',\n    10000: 'Christian',\n    20000: 'Christian',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Non-Christian',\n    60000: 'Non-Christian',\n    70000: 'Non-Christian',\n    80000: 'Non-Christian',\n    90001: 'Non-Christian',\n    90002: 'Non-Christian',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nChristian        13442\nUnaffiliated      7355\nNon-Christian     1651\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.9106347438752784\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n               precision    recall  f1-score   support\n\n    Christian       0.98      0.94      0.96      2724\nNon-Christian       0.42      0.60      0.49       317\n Unaffiliated       0.93      0.91      0.92      1449\n\n     accuracy                           0.91      4490\n    macro avg       0.77      0.82      0.79      4490\n weighted avg       0.92      0.91      0.91      4490\n\n0.9060133630289532\n-----------------------\nCONFUSION MATRIX:\n[[2565  149   10]\n [  35  191   91]\n [  18  119 1312]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Other Religion',\n    80000: 'Other Religion',\n    90001: 'Other Religion',\n    90002: 'Other Religion',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant        8723\nUnaffiliated      7355\nCatholic          4074\nOther Religion     963\nJewish             521\nMormon             362\nChristian          283\nMuslim             167\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6620267260579065\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                precision    recall  f1-score   support\n\n      Catholic       0.60      0.62      0.61       815\n     Christian       0.12      0.30      0.18        63\n        Jewish       0.26      0.60      0.36       107\n        Mormon       0.10      0.74      0.18        69\n        Muslim       0.40      0.49      0.44        37\nOther Religion       0.27      0.45      0.34       173\n    Protestant       0.85      0.55      0.66      1777\n  Unaffiliated       0.94      0.83      0.88      1449\n\n      accuracy                           0.65      4490\n     macro avg       0.44      0.57      0.46      4490\n  weighted avg       0.77      0.65      0.69      4490\n\n0.6478841870824054\n-----------------------\nCONFUSION MATRIX:\n[[ 502   36   55   71    2    4  142    3]\n [   6   19    7    7    0    8   15    1]\n [  13    6   64    2    2    7    4    9]\n [   6    2    1   51    0    2    6    1]\n [   2    5    3    2   18    4    2    1]\n [   3    4   14    1   14   77    1   59]\n [ 289   71   82  359    3    0  971    2]\n [  14    9   23    4    6  181    5 1207]]\n-----------------------\nROC CURVES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFull Currel: - overall accuracy: 0.67\n- weighted f-1: 0.70\n\nChristian vs Non vs Unaffaliated: - overall accuracy: 0.89\n- weighted f-1: 0.90\n\nMore Categories: - overall accuracy: 0.68\n- weighted f-1: 0.71\n\nFull Currel w Features: - overall accuracy: 0.60\n- weighted f-1: 0.66\n\nChristian vs Non vs Unaffaliated w Features: - overall accuracy: 0.91\n- weighted f-1: 0.91\n\nMore Categories w Features: - overall accuracy: 0.65\n- weighted f-1: 0.69"
  },
  {
    "objectID": "code/QDA.html#all-currel-categories",
    "href": "code/QDA.html#all-currel-categories",
    "title": "QDA",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, RocCurveDisplay\nfrom sklearn.preprocessing import StandardScaler, label_binarize\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.feature_selection import VarianceThreshold\nfrom imblearn.over_sampling import SMOTE\nimport warnings\n\n# dealing with an SkLearn deprecated warning\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn\")\n\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Orthodox Christian',\n    40001: 'Jehovahs Witness',\n    40002: 'Other Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Buddhist',\n    80000: 'Hindu',\n    90001: 'Other world Religions',\n    90002: 'Other faiths',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant               8723\nUnaffiliated             7355\nCatholic                 4074\nJewish                    521\nOther faiths              508\nMormon                    362\nBuddhist                  232\nMuslim                    167\nHindu                     164\nOrthodox Christian        132\nOther Christian           117\nOther world Religions      59\nJehovahs Witness           34\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nplt.figure(figsize=(12, 6))\nsns.countplot(x=y)\nplt.xticks(rotation=45, ha='right')\nplt.title(\"Class Distribution in CURREL\")\nplt.xlabel(\"CURREL NEW\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6795657015590201\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                       precision    recall  f1-score   support\n\n             Buddhist       0.22      0.18      0.20        39\n             Catholic       0.56      0.65      0.60       815\n                Hindu       0.48      0.41      0.44        34\n     Jehovahs Witness       1.00      0.10      0.18        10\n               Jewish       0.23      0.49      0.31       107\n               Mormon       0.18      0.65      0.28        69\n               Muslim       0.53      0.27      0.36        37\n   Orthodox Christian       0.00      0.00      0.00        27\n      Other Christian       0.00      0.00      0.00        26\n         Other faiths       0.14      0.38      0.20        87\nOther world Religions       0.00      0.00      0.00        13\n           Protestant       0.82      0.66      0.73      1777\n         Unaffiliated       0.91      0.81      0.86      1449\n\n             accuracy                           0.67      4490\n            macro avg       0.39      0.35      0.32      4490\n         weighted avg       0.74      0.67      0.70      4490\n\n0.6746102449888641\n-----------------------\nCONFUSION MATRIX:\n[[   7    1    2    0    3    0    2    0    0    6    0    2   16]\n [   4  530    2    0   42   39    0    3    4    7    1  171   12]\n [   5    2   14    0    1    0    3    0    0    0    0    1    8]\n [   0    1    0    1    0    0    0    0    0    0    0    8    0]\n [   0   17    0    0   52    1    0    1    0   10    0    7   19]\n [   0   12    0    0    0   45    0    0    0    0    0   11    1]\n [   3    8    4    0    2    0   10    1    0    0    0    6    3]\n [   1   10    1    0    1    0    1    0    0    0    0   12    1]\n [   0    6    0    0    1    1    0    0    0    8    0    7    3]\n [   2    3    0    0    2    0    0    0    0   33    0    5   42]\n [   1    0    1    0    0    0    1    0    0    4    0    2    4]\n [   2  342    0    0   74  161    1    6   11    7    0 1165    8]\n [   7   21    5    0   46    0    1    1    2  168    1   25 1172]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#christian-vs-non-christian-vs-unaffiliated",
    "href": "code/QDA.html#christian-vs-non-christian-vs-unaffiliated",
    "title": "QDA",
    "section": "",
    "text": "Code\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Christian',\n    10000: 'Christian',\n    20000: 'Christian',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Non-Christian',\n    60000: 'Non-Christian',\n    70000: 'Non-Christian',\n    80000: 'Non-Christian',\n    90001: 'Non-Christian',\n    90002: 'Non-Christian',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nChristian        13442\nUnaffiliated      7355\nNon-Christian     1651\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.8933741648106904\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n               precision    recall  f1-score   support\n\n    Christian       0.97      0.92      0.95      2724\nNon-Christian       0.38      0.57      0.46       317\n Unaffiliated       0.91      0.89      0.90      1449\n\n     accuracy                           0.89      4490\n    macro avg       0.75      0.80      0.77      4490\n weighted avg       0.91      0.89      0.90      4490\n\n0.889532293986637\n-----------------------\nCONFUSION MATRIX:\n[[2519  175   30]\n [  37  181   99]\n [  36  119 1294]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#protestant-catholic-mormon-christian-jewish-muslim-other-unaffaliated",
    "href": "code/QDA.html#protestant-catholic-mormon-christian-jewish-muslim-other-unaffaliated",
    "title": "QDA",
    "section": "",
    "text": "Code\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Other Religion',\n    80000: 'Other Religion',\n    90001: 'Other Religion',\n    90002: 'Other Religion',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant        8723\nUnaffiliated      7355\nCatholic          4074\nOther Religion     963\nJewish             521\nMormon             362\nChristian          283\nMuslim             167\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 100)\n(14366,)\n\nVALIDATION\n(3592, 100)\n(3592,)\n\nTEST\n(4490, 100)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6909799554565702\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                precision    recall  f1-score   support\n\n      Catholic       0.56      0.64      0.60       815\n     Christian       0.14      0.16      0.15        63\n        Jewish       0.23      0.50      0.32       107\n        Mormon       0.18      0.65      0.29        69\n        Muslim       0.53      0.22      0.31        37\nOther Religion       0.29      0.48      0.36       173\n    Protestant       0.83      0.65      0.73      1777\n  Unaffiliated       0.91      0.82      0.86      1449\n\n      accuracy                           0.68      4490\n     macro avg       0.46      0.52      0.45      4490\n  weighted avg       0.75      0.68      0.71      4490\n\n0.6841870824053452\n-----------------------\nCONFUSION MATRIX:\n[[ 525   18   43   39    0   13  166   11]\n [  14   10    4    1    1    8   22    3]\n [  18    1   54    1    0    5    7   21]\n [  12    0    0   45    0    0   11    1]\n [   6    2    1    0    8   12    6    2]\n [   5    1    8    0    4   83    7   65]\n [ 341   31   71  159    1    6 1160    8]\n [  19    8   51    0    1  159   24 1187]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#using-the-selected-features-for-all-currel",
    "href": "code/QDA.html#using-the-selected-features-for-all-currel",
    "title": "QDA",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, RocCurveDisplay\nfrom sklearn.preprocessing import StandardScaler, label_binarize\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.feature_selection import VarianceThreshold\nfrom imblearn.over_sampling import SMOTE\nimport warnings\n\n# dealing with an SkLearn deprecated warning\nwarnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"sklearn\")\n\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Orthodox Christian',\n    40001: 'Jehovahs Witness',\n    40002: 'Other Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Buddhist',\n    80000: 'Hindu',\n    90001: 'Other world Religions',\n    90002: 'Other faiths',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant               8723\nUnaffiliated             7355\nCatholic                 4074\nJewish                    521\nOther faiths              508\nMormon                    362\nBuddhist                  232\nMuslim                    167\nHindu                     164\nOrthodox Christian        132\nOther Christian           117\nOther world Religions      59\nJehovahs Witness           34\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6205456570155902\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                       precision    recall  f1-score   support\n\n             Buddhist       0.12      0.21      0.15        39\n             Catholic       0.61      0.60      0.60       815\n                Hindu       0.24      0.50      0.32        34\n     Jehovahs Witness       0.50      0.20      0.29        10\n               Jewish       0.27      0.53      0.36       107\n               Mormon       0.10      0.72      0.18        69\n               Muslim       0.44      0.43      0.44        37\n   Orthodox Christian       0.02      0.11      0.04        27\n      Other Christian       0.06      0.19      0.09        26\n         Other faiths       0.12      0.39      0.18        87\nOther world Religions       0.00      0.00      0.00        13\n           Protestant       0.84      0.53      0.65      1777\n         Unaffiliated       0.94      0.75      0.84      1449\n\n             accuracy                           0.60      4490\n            macro avg       0.33      0.40      0.32      4490\n         weighted avg       0.77      0.60      0.66      4490\n\n0.6044543429844098\n-----------------------\nCONFUSION MATRIX:\n[[   8    0    2    0    6    0    4    1    1    8    0    2    7]\n [   6  488    1    0   49   67    2   35   25    1    0  139    2]\n [   4    0   17    0    3    0    1    1    0    1    0    0    7]\n [   0    0    0    2    1    2    0    0    0    0    0    5    0]\n [   6   14    4    0   57    2    1    2    4    5    1    4    7]\n [   2    5    0    0    0   50    0    4    1    1    0    5    1]\n [   1    2    6    0    3    2   16    4    0    0    0    1    2]\n [   1    4    1    0    3    4    0    3    1    0    0    9    1]\n [   5    3    0    0    3    2    0    1    5    4    0    3    0]\n [   6    2    1    0    1    1    3    0    2   34    3    0   34]\n [   2    0    2    0    1    0    1    0    1    3    0    0    3]\n [   3  273    0    2   71  349    3   83   44    0    0  947    2]\n [  25   14   38    0   16    3    5    5    3  236   10    7 1087]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#using-selected-for-christian-vs-non-christian-vs-unaffiliated",
    "href": "code/QDA.html#using-selected-for-christian-vs-non-christian-vs-unaffiliated",
    "title": "QDA",
    "section": "",
    "text": "Code\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Christian',\n    10000: 'Christian',\n    20000: 'Christian',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Non-Christian',\n    60000: 'Non-Christian',\n    70000: 'Non-Christian',\n    80000: 'Non-Christian',\n    90001: 'Non-Christian',\n    90002: 'Non-Christian',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nChristian        13442\nUnaffiliated      7355\nNon-Christian     1651\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.9106347438752784\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n               precision    recall  f1-score   support\n\n    Christian       0.98      0.94      0.96      2724\nNon-Christian       0.42      0.60      0.49       317\n Unaffiliated       0.93      0.91      0.92      1449\n\n     accuracy                           0.91      4490\n    macro avg       0.77      0.82      0.79      4490\n weighted avg       0.92      0.91      0.91      4490\n\n0.9060133630289532\n-----------------------\nCONFUSION MATRIX:\n[[2565  149   10]\n [  35  191   91]\n [  18  119 1312]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#using-selected-for-protestant-catholic-mormon-christian-jewish-muslim-other-unaffaliated",
    "href": "code/QDA.html#using-selected-for-protestant-catholic-mormon-christian-jewish-muslim-other-unaffaliated",
    "title": "QDA",
    "section": "",
    "text": "Code\n# reading in data\nreligion = pd.read_csv(\"../data/religion_full_currel.csv\")\n\n\n\n\n\n\n\nCode\n# visualizing imbalance\ny = religion['CURREL']\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# dropping refused \nreligion = religion[religion['CURREL'] != 900000]\n\n# Christian, non-christian, unaffiliated\ngrouping_map = {\n    1000: 'Protestant',\n    10000: 'Catholic',\n    20000: 'Mormon',\n    30000: 'Christian',\n    40001: 'Christian',\n    40002: 'Christian',\n    50000: 'Jewish',\n    60000: 'Muslim',\n    70000: 'Other Religion',\n    80000: 'Other Religion',\n    90001: 'Other Religion',\n    90002: 'Other Religion',\n    100000: 'Unaffiliated'\n}\n\nreligion['CURREL_NEW'] = religion['CURREL'].map(grouping_map)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# getting the x and y variables\nX_int = religion.drop(columns=['RELTRAD', 'CURREL_NEW'])\n\n# take currel\ny = religion['CURREL_NEW']\n\n# drop some rows for y\nprint(y.value_counts())\n\n# checking shapes\nprint(y.shape)\nprint(X_int.shape)\n\n\nCURREL_NEW\nProtestant        8723\nUnaffiliated      7355\nCatholic          4074\nOther Religion     963\nJewish             521\nMormon             362\nChristian          283\nMuslim             167\nName: count, dtype: int64\n(22448,)\n(22448, 100)\n\n\n\n\nCode\nselected_features = [0, 7, 8, 10, 11, 13, 14, 16, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 38, 44, 47, 50, 53, 54, 57, 60, 62, 63, 64, 65, 70, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 92]\n\nX_int = X_int.iloc[:, selected_features]\nprint(X_int.shape)\n\n\n(22448, 50)\n\n\n\n\n\n\n\nCode\n# scaling X value\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_int)\n\n# split data into test, train, validation\nX_tmp, X_test, y_tmp, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=6600)\nX_train, X_val, y_train, y_val = train_test_split(X_tmp, y_tmp, test_size=0.2, random_state=6600)\n\n# print\nprint(\"\\nTRAIN\")\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(\"\\nVALIDATION\")\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(\"\\nTEST\")\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n\nTRAIN\n(14366, 50)\n(14366,)\n\nVALIDATION\n(3592, 50)\n(3592,)\n\nTEST\n(4490, 50)\n(4490,)\n\n\n\n\n\n\n\nCode\n# checking the imbalance\nsns.countplot(x=y)\nplt.xticks(rotation=45)\nplt.title(\"Class Distribution in CURREL\")\nplt.show()\n\n# adding re-sampling to deal with class imabalance\nsmote = SMOTE(random_state=6600)\nX_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# initiating parameters\nbest_val = 0\nopt_reg = None\nval_scores = {}\nreg_params = [0.0, 0.05, 0.1, 0.2, 0.5, 0.9]\n\nfor r in reg_params:\n    qda_model = QuadraticDiscriminantAnalysis(reg_param=0.2)\n    qda_model.fit(X_train_bal, y_train_bal)\n\n    # getting the predictions\n    y_val_pred = qda_model.predict(X_val)\n    val_score = accuracy_score(y_val, y_val_pred)\n    val_scores[r] = val_score\n\n    # updating best reg value\n    if val_score &gt; best_val:\n        best_val = val_score\n        opt_reg = r\n\nprint(\"\\nOptimal reg_param:\", opt_reg)\nprint(\"Validation accuracy:\", best_val)\n\n# plotting\nplt.plot(val_scores.keys(), val_scores.values(), marker='o')\nplt.title(\"Validation Accuracy vs reg_param\")\nplt.xlabel(\"reg_param\")\nplt.ylabel(\"Validation Accuracy\")\nplt.grid(True)\nplt.show()\n\n\n\nOptimal reg_param: 0.0\nValidation accuracy: 0.6620267260579065\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nopt_reg = 0.2\nqda_model = QuadraticDiscriminantAnalysis(reg_param=opt_reg) # iniating QDA\nqda_model.fit(X_train_bal, y_train_bal)\n\n# getting the predictions\ny_train_pred = qda_model.predict(X_train)\ny_test_pred = qda_model.predict(X_test)\ny_val_pred = qda_model.predict(X_val)\n\n\n\n\n\n\n\nCode\n# classification report\nprint(\"CLASSIFICATION REPORT:\")\nprint(classification_report(y_test, y_test_pred, zero_division=0))\nprint(accuracy_score(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# confusion matrix\nprint(\"CONFUSION MATRIX:\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(\"-----------------------\")\n\n# ROC curve\nprint(\"ROC CURVES:\")\nclasses = qda_model.classes_ # getting classes\ny_score = qda_model.predict_proba(X_test) # predictions\ny_onehot = label_binarize(y_test, classes=classes)\nfor i, label in enumerate(classes): # plotting ROC for all classes of digits\n    auc = roc_auc_score(y_onehot[:, i], y_score[:, i])\n    display = RocCurveDisplay.from_predictions( # ROC\n        y_true=y_onehot[:, i],\n        y_pred=y_score[:, i],\n        name=f\"Religion {label} vs the rest\",\n        color=\"darkorange\",\n        plot_chance_level=True,\n        despine=True,\n        )\n    _ = display.ax_.set(\n        xlabel=\"False Positive Rate\",\n        ylabel=\"True Positive Rate\"\n    )\nplt.show()\n\n\nCLASSIFICATION REPORT:\n                precision    recall  f1-score   support\n\n      Catholic       0.60      0.62      0.61       815\n     Christian       0.12      0.30      0.18        63\n        Jewish       0.26      0.60      0.36       107\n        Mormon       0.10      0.74      0.18        69\n        Muslim       0.40      0.49      0.44        37\nOther Religion       0.27      0.45      0.34       173\n    Protestant       0.85      0.55      0.66      1777\n  Unaffiliated       0.94      0.83      0.88      1449\n\n      accuracy                           0.65      4490\n     macro avg       0.44      0.57      0.46      4490\n  weighted avg       0.77      0.65      0.69      4490\n\n0.6478841870824054\n-----------------------\nCONFUSION MATRIX:\n[[ 502   36   55   71    2    4  142    3]\n [   6   19    7    7    0    8   15    1]\n [  13    6   64    2    2    7    4    9]\n [   6    2    1   51    0    2    6    1]\n [   2    5    3    2   18    4    2    1]\n [   3    4   14    1   14   77    1   59]\n [ 289   71   82  359    3    0  971    2]\n [  14    9   23    4    6  181    5 1207]]\n-----------------------\nROC CURVES:"
  },
  {
    "objectID": "code/QDA.html#final-results-summary",
    "href": "code/QDA.html#final-results-summary",
    "title": "QDA",
    "section": "",
    "text": "Full Currel: - overall accuracy: 0.67\n- weighted f-1: 0.70\n\nChristian vs Non vs Unaffaliated: - overall accuracy: 0.89\n- weighted f-1: 0.90\n\nMore Categories: - overall accuracy: 0.68\n- weighted f-1: 0.71\n\nFull Currel w Features: - overall accuracy: 0.60\n- weighted f-1: 0.66\n\nChristian vs Non vs Unaffaliated w Features: - overall accuracy: 0.91\n- weighted f-1: 0.91\n\nMore Categories w Features: - overall accuracy: 0.65\n- weighted f-1: 0.69"
  },
  {
    "objectID": "code/preprocess.html",
    "href": "code/preprocess.html",
    "title": "Religion Data Preprocessing",
    "section": "",
    "text": "import pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\n\n\n\n# reading in the file\nreligion = pd.read_csv(\"../data/2023-24-Religious-Landscape-Study-Dataset-Public-Use-File/2023-24 RLS Public Use File Feb 19.csv\")\n\n\n\n\n\n# number of observations\nprint(\"-----------------\")\nprint(\"DATA SHAPE:\")\nprint(religion.shape)\n\n-----------------\nDATA SHAPE:\n(36908, 654)\n\n\n\n\n\n\n# remove the restricted value\nreligion = religion.loc[:, religion.isnull().sum() != 36908]\n\n# droppping the weight variables and year\nreligion = religion.loc[:, ~religion.columns.str.startswith('REPWT_')]\nreligion = religion.drop(columns=['WEIGHT', 'YEAR_FROM_CODATE'])\n\n\n\n\n\n# understanding missing values\nprint(\"-----------------\")\nprint(\"MISSING VALUES:\")\nmissing_values = religion.isnull().sum()\nprint(missing_values[missing_values &gt; 0])\n\n# deleting all variables with missing values\nreligion_nona = religion.dropna(axis=1)\nmissing_values = religion_nona.isnull().sum()\nprint(missing_values[missing_values &gt; 0])\n\n#removing the RELCON variables (most responses are not sure/refuse)\nreligion_nona = religion_nona.drop(columns=['RELCON_A', 'RELCON_B', 'RELCON_C', 'RELCON_D', 'RELCON_E'])\n\n# seeing how many other observations:\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 99 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 99).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n-----------------\nMISSING VALUES:\nPAR2CHILDA     17232\nBORNFINAL      13722\nCONGRACE       18583\nLEADRACE       18583\nGOD2             563\nHUMNTR_A        6798\nHUMNTR_B        6798\nCHBORNFINAL     6289\nCHCONGRACE      6118\nRELMATCH       15094\nSPRELIMP       15094\nSPRELTALK      15094\nSPRELSIM       15094\nMARWHENREC     17999\nKIDACT_A       28589\nKIDACT_B       28589\nKIDACT_C       28589\nPARTYLN        22654\nHH3REC         10277\ndtype: int64\nSeries([], dtype: int64)\n-----------------\nVARIABLES WITH 99 RESPONSES:\nHAPPY: 155\nSATIS_A: 88\nSATIS_B: 135\nCHNG_A: 511\nCHNG_B: 262\nCHNG_C: 583\nDIVRELPOP: 335\nDIVRACPOP: 264\nQB2A: 985\nQB2C: 783\nQB2D: 470\nOPENIDEN: 592\nPOORASSIST: 539\nGOVSIZE1: 1121\nABRTLGL: 506\nGAYMARR: 727\nPAR2CHILD: 539\nCLIM1A: 198\nEVOL: 1095\nGUIDE_A: 109\nGUIDE_B: 143\nGUIDE_C: 109\nGUIDE_D: 180\nRELPER: 304\nSPIRPER: 299\nATTNDPERRLS: 218\nATTNDONRLS: 189\nRELIMP: 178\nMEMB: 247\nGOD: 563\nHVN: 1276\nHLL: 1542\nSOUL: 652\nBIBIMP: 198\nPRAY: 295\nGRACE: 218\nPRAC_A: 299\nPRAC_B: 335\nPRAC_C: 336\nPRAC_D: 293\nEXP_A: 571\nEXP_B: 429\nEXP_C: 333\nEXP_D: 687\nEXP_E: 851\nEXP_F: 336\nEXP_G: 318\nSPIRACT_A: 456\nSPIRACT_B: 395\nSPIRACT_C: 441\nSPIRACT_D: 520\nSPIRACT_E: 541\nSPIRACT_F: 580\nRTRT: 274\nSECMEMB: 297\nVOL12_CPS: 342\nSCIMPACT: 575\nRELIMPACT: 601\nSCRLCON1: 1233\nSPIRWORLD2: 869\nSECBEL1: 692\nSECBEL2: 762\nCHIMPREL_A: 218\nCHIMPREL_B: 220\nCHATTEND: 222\nCHEDU1: 247\nCHEDU2: 364\nLIFEDIR: 433\nLIFESPIR: 453\nGTHGHT: 217\nMARITAL: 442\nCHILDREN: 502\nRELINST_A: 1506\nRELINST_B: 1220\nRELINST_D: 1230\nRELINST_E: 1221\nRELINST_F: 979\nRELINST_G: 1054\nSCPRY1: 750\nSCPRY2: 735\nRELDISP: 1006\nCHRNAT: 1323\nBIRTHDECADE: 590\nHISP: 414\nAFROHISP: 589\nEDUCREC: 206\nE2: 169\nEMPLSIT: 254\nUSGEN: 922\nYEARLOCREC: 556\nMOVED: 280\nPARTY: 1288\nIDEO: 1320\nHH1REC: 934\nINTFREQ: 234\nINC_SDT1: 2887\nGENDER: 389\nFERTREC: 849\n\n\n\n\n\n\n# seeing how many 77\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 77 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 77).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n# seeing how many 98\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 98 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 98).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n# 1) DELETE ANY ROW WITH 99 AS A RESPONSE\n# delete any row with 99\nreligion_nona99 = religion_nona[(religion_nona != 99).all(axis=1)]\n\n# final check for missing/anamolies\nprint(\"-----------------\")\nprint(\"CHECK FOR ISSUES:\")\nfor column in religion_nona99.columns:\n  count_greater_15 = (religion_nona99[column] &gt; 15).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n-----------------\nVARIABLES WITH 77 RESPONSES:\nCLIM1A: 6070\n-----------------\nVARIABLES WITH 98 RESPONSES:\n-----------------\nCHECK FOR ISSUES:\nP_SUID: 22556\nCLIM1A: 3150\nRELTRAD: 22556\nCURREL: 22556\nFRMREL: 22556\n\n\n\n\n\n\n# dropping climate question and religion raised in:\n# dropping ID number\nreligion_nona99 = religion_nona99.drop(columns=['CLIM1A', 'FRMREL', 'P_SUID'])\n\n# tabling the outcomes\nprint(\"-----------------\")\nprint(\"CATEGORICAL COUNTS FOR OUTCOME VARIABLES:\")\nprint(\"CURREL:\")\nprint(religion_nona99['CURREL'].value_counts())\nprint(\"\\nRELTRAD:\")\nprint(religion_nona99['RELTRAD'].value_counts())\n\n# dropping the others and refusals from RELTRAD and CURREL\nreligion_nona99 = religion_nona99[\n  ~religion_nona99['CURREL'].isin([40002, 90001, 90002, 900000])\n]\nreligion_nona99 = religion_nona99[\n  ~religion_nona99['RELTRAD'].isin([40002, 90001, 90002, 900000])\n]\n\n# dropping the unaffliated variable\nreligion_nona99 = religion_nona99.drop(columns=['UNAFFILDETAIL'])\n\n# final observations and variables\nprint(\"-----------------\")\nprint(\"FINAL NUMBER OF OBSERVATIONS:\", religion_nona99.shape[0])\nprint(\"FINAL NUMBER OF VARIABLES:\", religion_nona99.shape[1])\nprint(\"-----------------\")\n\n# saving the dataset\nreligion_nona99.to_csv(\"../data/religion_data_no99.csv\", index=False)\n\n-----------------\nCATEGORICAL COUNTS FOR OUTCOME VARIABLES:\nCURREL:\nCURREL\n1000      8723\n100000    7355\n10000     4074\n50000      521\n90002      508\n20000      362\n70000      232\n60000      167\n80000      164\n30000      132\n40002      117\n900000     108\n90001       59\n40001       34\nName: count, dtype: int64\n\nRELTRAD:\nRELTRAD\n100000    7355\n1100      4867\n10000     4074\n1200      3046\n1300       810\n50000      521\n90002      508\n20000      362\n70000      232\n60000      167\n80000      164\n30000      132\n40002      117\n900000     108\n90001       59\n40001       34\nName: count, dtype: int64\n-----------------\nFINAL NUMBER OF OBSERVATIONS: 21764\nFINAL NUMBER OF VARIABLES: 101\n-----------------\n\n\nOutcome Variables: currel/reltrad (current religion or religious tradition) already broken into categories\nType: Multi-Class Classification\nMain Predictor Variables: - health/happiness/family life - views on political/societal topics - views on evolution/science/climate change - relgious/spiritual level - religious involvement/attendance - religious beliefs (heaven/hell/god) - how involved spiritually - marital/children status - views on churches in society/church and state - education/work - race - political affliation - gender - family income"
  },
  {
    "objectID": "code/preprocess.html#preprocessing-the-religious-survey-data",
    "href": "code/preprocess.html#preprocessing-the-religious-survey-data",
    "title": "Religion Data Preprocessing",
    "section": "",
    "text": "import pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\n\n\n\n# reading in the file\nreligion = pd.read_csv(\"../data/2023-24-Religious-Landscape-Study-Dataset-Public-Use-File/2023-24 RLS Public Use File Feb 19.csv\")\n\n\n\n\n\n# number of observations\nprint(\"-----------------\")\nprint(\"DATA SHAPE:\")\nprint(religion.shape)\n\n-----------------\nDATA SHAPE:\n(36908, 654)\n\n\n\n\n\n\n# remove the restricted value\nreligion = religion.loc[:, religion.isnull().sum() != 36908]\n\n# droppping the weight variables and year\nreligion = religion.loc[:, ~religion.columns.str.startswith('REPWT_')]\nreligion = religion.drop(columns=['WEIGHT', 'YEAR_FROM_CODATE'])\n\n\n\n\n\n# understanding missing values\nprint(\"-----------------\")\nprint(\"MISSING VALUES:\")\nmissing_values = religion.isnull().sum()\nprint(missing_values[missing_values &gt; 0])\n\n# deleting all variables with missing values\nreligion_nona = religion.dropna(axis=1)\nmissing_values = religion_nona.isnull().sum()\nprint(missing_values[missing_values &gt; 0])\n\n#removing the RELCON variables (most responses are not sure/refuse)\nreligion_nona = religion_nona.drop(columns=['RELCON_A', 'RELCON_B', 'RELCON_C', 'RELCON_D', 'RELCON_E'])\n\n# seeing how many other observations:\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 99 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 99).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n-----------------\nMISSING VALUES:\nPAR2CHILDA     17232\nBORNFINAL      13722\nCONGRACE       18583\nLEADRACE       18583\nGOD2             563\nHUMNTR_A        6798\nHUMNTR_B        6798\nCHBORNFINAL     6289\nCHCONGRACE      6118\nRELMATCH       15094\nSPRELIMP       15094\nSPRELTALK      15094\nSPRELSIM       15094\nMARWHENREC     17999\nKIDACT_A       28589\nKIDACT_B       28589\nKIDACT_C       28589\nPARTYLN        22654\nHH3REC         10277\ndtype: int64\nSeries([], dtype: int64)\n-----------------\nVARIABLES WITH 99 RESPONSES:\nHAPPY: 155\nSATIS_A: 88\nSATIS_B: 135\nCHNG_A: 511\nCHNG_B: 262\nCHNG_C: 583\nDIVRELPOP: 335\nDIVRACPOP: 264\nQB2A: 985\nQB2C: 783\nQB2D: 470\nOPENIDEN: 592\nPOORASSIST: 539\nGOVSIZE1: 1121\nABRTLGL: 506\nGAYMARR: 727\nPAR2CHILD: 539\nCLIM1A: 198\nEVOL: 1095\nGUIDE_A: 109\nGUIDE_B: 143\nGUIDE_C: 109\nGUIDE_D: 180\nRELPER: 304\nSPIRPER: 299\nATTNDPERRLS: 218\nATTNDONRLS: 189\nRELIMP: 178\nMEMB: 247\nGOD: 563\nHVN: 1276\nHLL: 1542\nSOUL: 652\nBIBIMP: 198\nPRAY: 295\nGRACE: 218\nPRAC_A: 299\nPRAC_B: 335\nPRAC_C: 336\nPRAC_D: 293\nEXP_A: 571\nEXP_B: 429\nEXP_C: 333\nEXP_D: 687\nEXP_E: 851\nEXP_F: 336\nEXP_G: 318\nSPIRACT_A: 456\nSPIRACT_B: 395\nSPIRACT_C: 441\nSPIRACT_D: 520\nSPIRACT_E: 541\nSPIRACT_F: 580\nRTRT: 274\nSECMEMB: 297\nVOL12_CPS: 342\nSCIMPACT: 575\nRELIMPACT: 601\nSCRLCON1: 1233\nSPIRWORLD2: 869\nSECBEL1: 692\nSECBEL2: 762\nCHIMPREL_A: 218\nCHIMPREL_B: 220\nCHATTEND: 222\nCHEDU1: 247\nCHEDU2: 364\nLIFEDIR: 433\nLIFESPIR: 453\nGTHGHT: 217\nMARITAL: 442\nCHILDREN: 502\nRELINST_A: 1506\nRELINST_B: 1220\nRELINST_D: 1230\nRELINST_E: 1221\nRELINST_F: 979\nRELINST_G: 1054\nSCPRY1: 750\nSCPRY2: 735\nRELDISP: 1006\nCHRNAT: 1323\nBIRTHDECADE: 590\nHISP: 414\nAFROHISP: 589\nEDUCREC: 206\nE2: 169\nEMPLSIT: 254\nUSGEN: 922\nYEARLOCREC: 556\nMOVED: 280\nPARTY: 1288\nIDEO: 1320\nHH1REC: 934\nINTFREQ: 234\nINC_SDT1: 2887\nGENDER: 389\nFERTREC: 849\n\n\n\n\n\n\n# seeing how many 77\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 77 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 77).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n# seeing how many 98\nprint(\"-----------------\")\nprint(\"VARIABLES WITH 98 RESPONSES:\")\nfor column in religion_nona.columns:\n  count_greater_15 = (religion_nona[column] == 98).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n# 1) DELETE ANY ROW WITH 99 AS A RESPONSE\n# delete any row with 99\nreligion_nona99 = religion_nona[(religion_nona != 99).all(axis=1)]\n\n# final check for missing/anamolies\nprint(\"-----------------\")\nprint(\"CHECK FOR ISSUES:\")\nfor column in religion_nona99.columns:\n  count_greater_15 = (religion_nona99[column] &gt; 15).sum()\n  if count_greater_15 &gt; 0:\n    print(f\"{column}: {count_greater_15}\")\n\n-----------------\nVARIABLES WITH 77 RESPONSES:\nCLIM1A: 6070\n-----------------\nVARIABLES WITH 98 RESPONSES:\n-----------------\nCHECK FOR ISSUES:\nP_SUID: 22556\nCLIM1A: 3150\nRELTRAD: 22556\nCURREL: 22556\nFRMREL: 22556\n\n\n\n\n\n\n# dropping climate question and religion raised in:\n# dropping ID number\nreligion_nona99 = religion_nona99.drop(columns=['CLIM1A', 'FRMREL', 'P_SUID'])\n\n# tabling the outcomes\nprint(\"-----------------\")\nprint(\"CATEGORICAL COUNTS FOR OUTCOME VARIABLES:\")\nprint(\"CURREL:\")\nprint(religion_nona99['CURREL'].value_counts())\nprint(\"\\nRELTRAD:\")\nprint(religion_nona99['RELTRAD'].value_counts())\n\n# dropping the others and refusals from RELTRAD and CURREL\nreligion_nona99 = religion_nona99[\n  ~religion_nona99['CURREL'].isin([40002, 90001, 90002, 900000])\n]\nreligion_nona99 = religion_nona99[\n  ~religion_nona99['RELTRAD'].isin([40002, 90001, 90002, 900000])\n]\n\n# dropping the unaffliated variable\nreligion_nona99 = religion_nona99.drop(columns=['UNAFFILDETAIL'])\n\n# final observations and variables\nprint(\"-----------------\")\nprint(\"FINAL NUMBER OF OBSERVATIONS:\", religion_nona99.shape[0])\nprint(\"FINAL NUMBER OF VARIABLES:\", religion_nona99.shape[1])\nprint(\"-----------------\")\n\n# saving the dataset\nreligion_nona99.to_csv(\"../data/religion_data_no99.csv\", index=False)\n\n-----------------\nCATEGORICAL COUNTS FOR OUTCOME VARIABLES:\nCURREL:\nCURREL\n1000      8723\n100000    7355\n10000     4074\n50000      521\n90002      508\n20000      362\n70000      232\n60000      167\n80000      164\n30000      132\n40002      117\n900000     108\n90001       59\n40001       34\nName: count, dtype: int64\n\nRELTRAD:\nRELTRAD\n100000    7355\n1100      4867\n10000     4074\n1200      3046\n1300       810\n50000      521\n90002      508\n20000      362\n70000      232\n60000      167\n80000      164\n30000      132\n40002      117\n900000     108\n90001       59\n40001       34\nName: count, dtype: int64\n-----------------\nFINAL NUMBER OF OBSERVATIONS: 21764\nFINAL NUMBER OF VARIABLES: 101\n-----------------\n\n\nOutcome Variables: currel/reltrad (current religion or religious tradition) already broken into categories\nType: Multi-Class Classification\nMain Predictor Variables: - health/happiness/family life - views on political/societal topics - views on evolution/science/climate change - relgious/spiritual level - religious involvement/attendance - religious beliefs (heaven/hell/god) - how involved spiritually - marital/children status - views on churches in society/church and state - education/work - race - political affliation - gender - family income"
  }
]